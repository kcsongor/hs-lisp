(data (Maybe a) [Just a] [Nothing])

(def fromJust (\(Just x).x))

(def fmap (\f (Just x). (Just (f x))))

(data (Bool) [True] [False])

(def or (
  [True x]  True
  [False x] x
))

(def and (
  [True x]  x
  [False x] False
))

(def not (
  [True]  False
  [x]     True
))

(def if (
  [True a b]  a
  [False a b] b
))

(data (Tuple2 a b) [Tuple2 a b])
(data (Tuple3 a b c) [Tuple3 a b c])

(def , Tuple2)
(def ,, Tuple3)

(def fst (\(, f s) . f))
(def snd (\(, f s) . s))

(def head (
  [(: x xs)] x))

(def tail (
  [(: x xs)] xs))

(def reverse (
  [[]]       []
  [(: x xs)] [(++ xs [x])]
))

(def map (
  [f []]       []
  [f (: x xs)] (: (f x) (map f xs))
))

(def zip (
  [(: a as) (: b bs)] (: (, a b) (zip as bs))
  [as bs] []
))

(def length (
  [[]] 0
  [(: l ls)] (+ 1 (length ls))
))

(def foldr (
  [f b []] b
  [f b (: a as)] (f a (foldr f b as))
))

(def foldr1 (
  [f (: a as)] (foldr f a as)
))

(def foldl (
  [f b []] b
  [f b (: a as)] (foldl f (f b a) as))
)

(def foldl1 (
  [f (: a as)] (foldl f a as)
))

